// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: florin/v1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryAuthority struct {
}

func (m *QueryAuthority) Reset()         { *m = QueryAuthority{} }
func (m *QueryAuthority) String() string { return proto.CompactTextString(m) }
func (*QueryAuthority) ProtoMessage()    {}
func (*QueryAuthority) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{0}
}
func (m *QueryAuthority) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuthority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuthority.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuthority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuthority.Merge(m, src)
}
func (m *QueryAuthority) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuthority) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuthority.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuthority proto.InternalMessageInfo

type QueryAuthorityResponse struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *QueryAuthorityResponse) Reset()         { *m = QueryAuthorityResponse{} }
func (m *QueryAuthorityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuthorityResponse) ProtoMessage()    {}
func (*QueryAuthorityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{1}
}
func (m *QueryAuthorityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuthorityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuthorityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuthorityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuthorityResponse.Merge(m, src)
}
func (m *QueryAuthorityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuthorityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuthorityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuthorityResponse proto.InternalMessageInfo

func (m *QueryAuthorityResponse) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

type QueryAllowedDenoms struct {
}

func (m *QueryAllowedDenoms) Reset()         { *m = QueryAllowedDenoms{} }
func (m *QueryAllowedDenoms) String() string { return proto.CompactTextString(m) }
func (*QueryAllowedDenoms) ProtoMessage()    {}
func (*QueryAllowedDenoms) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{2}
}
func (m *QueryAllowedDenoms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowedDenoms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowedDenoms.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowedDenoms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowedDenoms.Merge(m, src)
}
func (m *QueryAllowedDenoms) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowedDenoms) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowedDenoms.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowedDenoms proto.InternalMessageInfo

type QueryAllowedDenomsResponse struct {
	AllowedDenoms []string `protobuf:"bytes,1,rep,name=allowed_denoms,json=allowedDenoms,proto3" json:"allowed_denoms,omitempty"`
}

func (m *QueryAllowedDenomsResponse) Reset()         { *m = QueryAllowedDenomsResponse{} }
func (m *QueryAllowedDenomsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllowedDenomsResponse) ProtoMessage()    {}
func (*QueryAllowedDenomsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{3}
}
func (m *QueryAllowedDenomsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowedDenomsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowedDenomsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowedDenomsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowedDenomsResponse.Merge(m, src)
}
func (m *QueryAllowedDenomsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowedDenomsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowedDenomsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowedDenomsResponse proto.InternalMessageInfo

func (m *QueryAllowedDenomsResponse) GetAllowedDenoms() []string {
	if m != nil {
		return m.AllowedDenoms
	}
	return nil
}

type QueryOwners struct {
}

func (m *QueryOwners) Reset()         { *m = QueryOwners{} }
func (m *QueryOwners) String() string { return proto.CompactTextString(m) }
func (*QueryOwners) ProtoMessage()    {}
func (*QueryOwners) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{4}
}
func (m *QueryOwners) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwners) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwners.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwners) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwners.Merge(m, src)
}
func (m *QueryOwners) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwners) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwners.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwners proto.InternalMessageInfo

type QueryOwnersResponse struct {
	Owners        map[string]string `protobuf:"bytes,1,rep,name=owners,proto3" json:"owners,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PendingOwners map[string]string `protobuf:"bytes,2,rep,name=pending_owners,json=pendingOwners,proto3" json:"pending_owners,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryOwnersResponse) Reset()         { *m = QueryOwnersResponse{} }
func (m *QueryOwnersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOwnersResponse) ProtoMessage()    {}
func (*QueryOwnersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{5}
}
func (m *QueryOwnersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnersResponse.Merge(m, src)
}
func (m *QueryOwnersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnersResponse proto.InternalMessageInfo

func (m *QueryOwnersResponse) GetOwners() map[string]string {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *QueryOwnersResponse) GetPendingOwners() map[string]string {
	if m != nil {
		return m.PendingOwners
	}
	return nil
}

type QueryOwner struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryOwner) Reset()         { *m = QueryOwner{} }
func (m *QueryOwner) String() string { return proto.CompactTextString(m) }
func (*QueryOwner) ProtoMessage()    {}
func (*QueryOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{6}
}
func (m *QueryOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwner.Merge(m, src)
}
func (m *QueryOwner) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwner.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwner proto.InternalMessageInfo

func (m *QueryOwner) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryOwnerResponse struct {
	Owner        string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	PendingOwner string `protobuf:"bytes,2,opt,name=pending_owner,json=pendingOwner,proto3" json:"pending_owner,omitempty"`
}

func (m *QueryOwnerResponse) Reset()         { *m = QueryOwnerResponse{} }
func (m *QueryOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOwnerResponse) ProtoMessage()    {}
func (*QueryOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{7}
}
func (m *QueryOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerResponse.Merge(m, src)
}
func (m *QueryOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerResponse proto.InternalMessageInfo

func (m *QueryOwnerResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryOwnerResponse) GetPendingOwner() string {
	if m != nil {
		return m.PendingOwner
	}
	return ""
}

type QuerySystems struct {
}

func (m *QuerySystems) Reset()         { *m = QuerySystems{} }
func (m *QuerySystems) String() string { return proto.CompactTextString(m) }
func (*QuerySystems) ProtoMessage()    {}
func (*QuerySystems) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{8}
}
func (m *QuerySystems) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySystems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySystems.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySystems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySystems.Merge(m, src)
}
func (m *QuerySystems) XXX_Size() int {
	return m.Size()
}
func (m *QuerySystems) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySystems.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySystems proto.InternalMessageInfo

type QuerySystemsResponse struct {
	Systems []Account `protobuf:"bytes,1,rep,name=systems,proto3" json:"systems"`
}

func (m *QuerySystemsResponse) Reset()         { *m = QuerySystemsResponse{} }
func (m *QuerySystemsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySystemsResponse) ProtoMessage()    {}
func (*QuerySystemsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{9}
}
func (m *QuerySystemsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySystemsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySystemsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySystemsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySystemsResponse.Merge(m, src)
}
func (m *QuerySystemsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySystemsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySystemsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySystemsResponse proto.InternalMessageInfo

func (m *QuerySystemsResponse) GetSystems() []Account {
	if m != nil {
		return m.Systems
	}
	return nil
}

type QuerySystemsByDenom struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QuerySystemsByDenom) Reset()         { *m = QuerySystemsByDenom{} }
func (m *QuerySystemsByDenom) String() string { return proto.CompactTextString(m) }
func (*QuerySystemsByDenom) ProtoMessage()    {}
func (*QuerySystemsByDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{10}
}
func (m *QuerySystemsByDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySystemsByDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySystemsByDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySystemsByDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySystemsByDenom.Merge(m, src)
}
func (m *QuerySystemsByDenom) XXX_Size() int {
	return m.Size()
}
func (m *QuerySystemsByDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySystemsByDenom.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySystemsByDenom proto.InternalMessageInfo

func (m *QuerySystemsByDenom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QuerySystemsByDenomResponse struct {
	Systems []string `protobuf:"bytes,1,rep,name=systems,proto3" json:"systems,omitempty"`
}

func (m *QuerySystemsByDenomResponse) Reset()         { *m = QuerySystemsByDenomResponse{} }
func (m *QuerySystemsByDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySystemsByDenomResponse) ProtoMessage()    {}
func (*QuerySystemsByDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{11}
}
func (m *QuerySystemsByDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySystemsByDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySystemsByDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySystemsByDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySystemsByDenomResponse.Merge(m, src)
}
func (m *QuerySystemsByDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySystemsByDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySystemsByDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySystemsByDenomResponse proto.InternalMessageInfo

func (m *QuerySystemsByDenomResponse) GetSystems() []string {
	if m != nil {
		return m.Systems
	}
	return nil
}

type QueryAdmins struct {
}

func (m *QueryAdmins) Reset()         { *m = QueryAdmins{} }
func (m *QueryAdmins) String() string { return proto.CompactTextString(m) }
func (*QueryAdmins) ProtoMessage()    {}
func (*QueryAdmins) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{12}
}
func (m *QueryAdmins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAdmins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAdmins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAdmins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAdmins.Merge(m, src)
}
func (m *QueryAdmins) XXX_Size() int {
	return m.Size()
}
func (m *QueryAdmins) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAdmins.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAdmins proto.InternalMessageInfo

type QueryAdminsResponse struct {
	Admins []Account `protobuf:"bytes,1,rep,name=admins,proto3" json:"admins"`
}

func (m *QueryAdminsResponse) Reset()         { *m = QueryAdminsResponse{} }
func (m *QueryAdminsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAdminsResponse) ProtoMessage()    {}
func (*QueryAdminsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{13}
}
func (m *QueryAdminsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAdminsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAdminsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAdminsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAdminsResponse.Merge(m, src)
}
func (m *QueryAdminsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAdminsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAdminsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAdminsResponse proto.InternalMessageInfo

func (m *QueryAdminsResponse) GetAdmins() []Account {
	if m != nil {
		return m.Admins
	}
	return nil
}

type QueryAdminsByDenom struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryAdminsByDenom) Reset()         { *m = QueryAdminsByDenom{} }
func (m *QueryAdminsByDenom) String() string { return proto.CompactTextString(m) }
func (*QueryAdminsByDenom) ProtoMessage()    {}
func (*QueryAdminsByDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{14}
}
func (m *QueryAdminsByDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAdminsByDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAdminsByDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAdminsByDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAdminsByDenom.Merge(m, src)
}
func (m *QueryAdminsByDenom) XXX_Size() int {
	return m.Size()
}
func (m *QueryAdminsByDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAdminsByDenom.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAdminsByDenom proto.InternalMessageInfo

func (m *QueryAdminsByDenom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryAdminsByDenomResponse struct {
	Admins []string `protobuf:"bytes,1,rep,name=admins,proto3" json:"admins,omitempty"`
}

func (m *QueryAdminsByDenomResponse) Reset()         { *m = QueryAdminsByDenomResponse{} }
func (m *QueryAdminsByDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAdminsByDenomResponse) ProtoMessage()    {}
func (*QueryAdminsByDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{15}
}
func (m *QueryAdminsByDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAdminsByDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAdminsByDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAdminsByDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAdminsByDenomResponse.Merge(m, src)
}
func (m *QueryAdminsByDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAdminsByDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAdminsByDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAdminsByDenomResponse proto.InternalMessageInfo

func (m *QueryAdminsByDenomResponse) GetAdmins() []string {
	if m != nil {
		return m.Admins
	}
	return nil
}

type QueryMaxMintAllowances struct {
}

func (m *QueryMaxMintAllowances) Reset()         { *m = QueryMaxMintAllowances{} }
func (m *QueryMaxMintAllowances) String() string { return proto.CompactTextString(m) }
func (*QueryMaxMintAllowances) ProtoMessage()    {}
func (*QueryMaxMintAllowances) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{16}
}
func (m *QueryMaxMintAllowances) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMaxMintAllowances) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMaxMintAllowances.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMaxMintAllowances) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMaxMintAllowances.Merge(m, src)
}
func (m *QueryMaxMintAllowances) XXX_Size() int {
	return m.Size()
}
func (m *QueryMaxMintAllowances) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMaxMintAllowances.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMaxMintAllowances proto.InternalMessageInfo

type QueryMaxMintAllowancesResponse struct {
	MaxMintAllowances map[string]string `protobuf:"bytes,1,rep,name=max_mint_allowances,json=maxMintAllowances,proto3" json:"max_mint_allowances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryMaxMintAllowancesResponse) Reset()         { *m = QueryMaxMintAllowancesResponse{} }
func (m *QueryMaxMintAllowancesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMaxMintAllowancesResponse) ProtoMessage()    {}
func (*QueryMaxMintAllowancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{17}
}
func (m *QueryMaxMintAllowancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMaxMintAllowancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMaxMintAllowancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMaxMintAllowancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMaxMintAllowancesResponse.Merge(m, src)
}
func (m *QueryMaxMintAllowancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMaxMintAllowancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMaxMintAllowancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMaxMintAllowancesResponse proto.InternalMessageInfo

func (m *QueryMaxMintAllowancesResponse) GetMaxMintAllowances() map[string]string {
	if m != nil {
		return m.MaxMintAllowances
	}
	return nil
}

type QueryMaxMintAllowance struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryMaxMintAllowance) Reset()         { *m = QueryMaxMintAllowance{} }
func (m *QueryMaxMintAllowance) String() string { return proto.CompactTextString(m) }
func (*QueryMaxMintAllowance) ProtoMessage()    {}
func (*QueryMaxMintAllowance) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{18}
}
func (m *QueryMaxMintAllowance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMaxMintAllowance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMaxMintAllowance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMaxMintAllowance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMaxMintAllowance.Merge(m, src)
}
func (m *QueryMaxMintAllowance) XXX_Size() int {
	return m.Size()
}
func (m *QueryMaxMintAllowance) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMaxMintAllowance.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMaxMintAllowance proto.InternalMessageInfo

func (m *QueryMaxMintAllowance) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryMaxMintAllowanceResponse struct {
	MaxMintAllowance cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=max_mint_allowance,json=maxMintAllowance,proto3,customtype=cosmossdk.io/math.Int" json:"max_mint_allowance"`
}

func (m *QueryMaxMintAllowanceResponse) Reset()         { *m = QueryMaxMintAllowanceResponse{} }
func (m *QueryMaxMintAllowanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMaxMintAllowanceResponse) ProtoMessage()    {}
func (*QueryMaxMintAllowanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{19}
}
func (m *QueryMaxMintAllowanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMaxMintAllowanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMaxMintAllowanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMaxMintAllowanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMaxMintAllowanceResponse.Merge(m, src)
}
func (m *QueryMaxMintAllowanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMaxMintAllowanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMaxMintAllowanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMaxMintAllowanceResponse proto.InternalMessageInfo

type QueryMintAllowances struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryMintAllowances) Reset()         { *m = QueryMintAllowances{} }
func (m *QueryMintAllowances) String() string { return proto.CompactTextString(m) }
func (*QueryMintAllowances) ProtoMessage()    {}
func (*QueryMintAllowances) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{20}
}
func (m *QueryMintAllowances) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMintAllowances) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMintAllowances.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMintAllowances) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMintAllowances.Merge(m, src)
}
func (m *QueryMintAllowances) XXX_Size() int {
	return m.Size()
}
func (m *QueryMintAllowances) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMintAllowances.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMintAllowances proto.InternalMessageInfo

func (m *QueryMintAllowances) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryMintAllowancesResponse struct {
	Allowances map[string]string `protobuf:"bytes,1,rep,name=allowances,proto3" json:"allowances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryMintAllowancesResponse) Reset()         { *m = QueryMintAllowancesResponse{} }
func (m *QueryMintAllowancesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMintAllowancesResponse) ProtoMessage()    {}
func (*QueryMintAllowancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{21}
}
func (m *QueryMintAllowancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMintAllowancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMintAllowancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMintAllowancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMintAllowancesResponse.Merge(m, src)
}
func (m *QueryMintAllowancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMintAllowancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMintAllowancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMintAllowancesResponse proto.InternalMessageInfo

func (m *QueryMintAllowancesResponse) GetAllowances() map[string]string {
	if m != nil {
		return m.Allowances
	}
	return nil
}

type QueryMintAllowance struct {
	Denom   string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryMintAllowance) Reset()         { *m = QueryMintAllowance{} }
func (m *QueryMintAllowance) String() string { return proto.CompactTextString(m) }
func (*QueryMintAllowance) ProtoMessage()    {}
func (*QueryMintAllowance) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{22}
}
func (m *QueryMintAllowance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMintAllowance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMintAllowance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMintAllowance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMintAllowance.Merge(m, src)
}
func (m *QueryMintAllowance) XXX_Size() int {
	return m.Size()
}
func (m *QueryMintAllowance) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMintAllowance.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMintAllowance proto.InternalMessageInfo

func (m *QueryMintAllowance) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryMintAllowance) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type QueryMintAllowanceResponse struct {
	Allowance cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=allowance,proto3,customtype=cosmossdk.io/math.Int" json:"allowance"`
}

func (m *QueryMintAllowanceResponse) Reset()         { *m = QueryMintAllowanceResponse{} }
func (m *QueryMintAllowanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMintAllowanceResponse) ProtoMessage()    {}
func (*QueryMintAllowanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f896e6ddcd63be16, []int{23}
}
func (m *QueryMintAllowanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMintAllowanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMintAllowanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMintAllowanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMintAllowanceResponse.Merge(m, src)
}
func (m *QueryMintAllowanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMintAllowanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMintAllowanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMintAllowanceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryAuthority)(nil), "florin.v1.QueryAuthority")
	proto.RegisterType((*QueryAuthorityResponse)(nil), "florin.v1.QueryAuthorityResponse")
	proto.RegisterType((*QueryAllowedDenoms)(nil), "florin.v1.QueryAllowedDenoms")
	proto.RegisterType((*QueryAllowedDenomsResponse)(nil), "florin.v1.QueryAllowedDenomsResponse")
	proto.RegisterType((*QueryOwners)(nil), "florin.v1.QueryOwners")
	proto.RegisterType((*QueryOwnersResponse)(nil), "florin.v1.QueryOwnersResponse")
	proto.RegisterMapType((map[string]string)(nil), "florin.v1.QueryOwnersResponse.OwnersEntry")
	proto.RegisterMapType((map[string]string)(nil), "florin.v1.QueryOwnersResponse.PendingOwnersEntry")
	proto.RegisterType((*QueryOwner)(nil), "florin.v1.QueryOwner")
	proto.RegisterType((*QueryOwnerResponse)(nil), "florin.v1.QueryOwnerResponse")
	proto.RegisterType((*QuerySystems)(nil), "florin.v1.QuerySystems")
	proto.RegisterType((*QuerySystemsResponse)(nil), "florin.v1.QuerySystemsResponse")
	proto.RegisterType((*QuerySystemsByDenom)(nil), "florin.v1.QuerySystemsByDenom")
	proto.RegisterType((*QuerySystemsByDenomResponse)(nil), "florin.v1.QuerySystemsByDenomResponse")
	proto.RegisterType((*QueryAdmins)(nil), "florin.v1.QueryAdmins")
	proto.RegisterType((*QueryAdminsResponse)(nil), "florin.v1.QueryAdminsResponse")
	proto.RegisterType((*QueryAdminsByDenom)(nil), "florin.v1.QueryAdminsByDenom")
	proto.RegisterType((*QueryAdminsByDenomResponse)(nil), "florin.v1.QueryAdminsByDenomResponse")
	proto.RegisterType((*QueryMaxMintAllowances)(nil), "florin.v1.QueryMaxMintAllowances")
	proto.RegisterType((*QueryMaxMintAllowancesResponse)(nil), "florin.v1.QueryMaxMintAllowancesResponse")
	proto.RegisterMapType((map[string]string)(nil), "florin.v1.QueryMaxMintAllowancesResponse.MaxMintAllowancesEntry")
	proto.RegisterType((*QueryMaxMintAllowance)(nil), "florin.v1.QueryMaxMintAllowance")
	proto.RegisterType((*QueryMaxMintAllowanceResponse)(nil), "florin.v1.QueryMaxMintAllowanceResponse")
	proto.RegisterType((*QueryMintAllowances)(nil), "florin.v1.QueryMintAllowances")
	proto.RegisterType((*QueryMintAllowancesResponse)(nil), "florin.v1.QueryMintAllowancesResponse")
	proto.RegisterMapType((map[string]string)(nil), "florin.v1.QueryMintAllowancesResponse.AllowancesEntry")
	proto.RegisterType((*QueryMintAllowance)(nil), "florin.v1.QueryMintAllowance")
	proto.RegisterType((*QueryMintAllowanceResponse)(nil), "florin.v1.QueryMintAllowanceResponse")
}

func init() { proto.RegisterFile("florin/v1/query.proto", fileDescriptor_f896e6ddcd63be16) }

var fileDescriptor_f896e6ddcd63be16 = []byte{
	// 1084 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xba, 0xc4, 0x95, 0x5f, 0x6a, 0x93, 0x4c, 0x1c, 0xd7, 0xd9, 0xc4, 0x9b, 0x64, 0xc0,
	0x6d, 0x9a, 0x28, 0xde, 0xc6, 0xa0, 0x52, 0x90, 0x90, 0x1a, 0x37, 0x08, 0x15, 0xa9, 0x14, 0x8c,
	0x84, 0x10, 0x07, 0xdc, 0x8d, 0xbd, 0x38, 0xab, 0x7a, 0x67, 0x8c, 0x77, 0x9d, 0xd6, 0xaa, 0x22,
	0x04, 0x27, 0xb8, 0x00, 0x82, 0x2f, 0xc1, 0xb1, 0x87, 0x7e, 0x88, 0x4a, 0x5c, 0x2a, 0xb8, 0x54,
	0x1c, 0x2a, 0x94, 0x20, 0xf1, 0x35, 0x90, 0x67, 0x66, 0x67, 0xff, 0xdb, 0xa9, 0x72, 0x89, 0xfc,
	0xfe, 0xcc, 0xef, 0xf7, 0xe6, 0xbd, 0x37, 0xfb, 0x53, 0x60, 0xe9, 0xeb, 0x1e, 0x1d, 0x58, 0x44,
	0x3f, 0xda, 0xd5, 0xbf, 0x19, 0x9a, 0x83, 0x51, 0xad, 0x3f, 0xa0, 0x2e, 0x45, 0x39, 0xee, 0xae,
	0x1d, 0xed, 0xaa, 0x0b, 0x86, 0x6d, 0x11, 0xaa, 0xb3, 0xbf, 0x3c, 0xaa, 0xae, 0xb4, 0xa9, 0x63,
	0x53, 0x87, 0x9f, 0x88, 0x1c, 0x55, 0x97, 0x79, 0xb0, 0xc5, 0x2c, 0x9d, 0x1b, 0x22, 0x74, 0xd9,
	0x27, 0xeb, 0x9a, 0xc4, 0x74, 0x2c, 0x2f, 0x50, 0xec, 0xd2, 0x2e, 0xe5, 0x07, 0xc6, 0xbf, 0x84,
	0x77, 0xb5, 0x4b, 0x69, 0xb7, 0x67, 0xea, 0x46, 0xdf, 0xd2, 0x0d, 0x42, 0xa8, 0x6b, 0xb8, 0x16,
	0x25, 0xe2, 0x0c, 0x9e, 0x87, 0xc2, 0xa7, 0x63, 0xda, 0xbd, 0xa1, 0x7b, 0x48, 0x07, 0x96, 0x3b,
	0xc2, 0x37, 0xa0, 0x14, 0xf6, 0x34, 0x4d, 0xa7, 0x4f, 0x89, 0x63, 0xa2, 0x55, 0xc8, 0x19, 0x9e,
	0xb3, 0xac, 0xac, 0x2b, 0x9b, 0xb9, 0xa6, 0xef, 0xc0, 0x45, 0x40, 0xfc, 0x5c, 0xaf, 0x47, 0x1f,
	0x9a, 0x9d, 0x7d, 0x93, 0x50, 0xdb, 0xc1, 0xb7, 0x41, 0x8d, 0x7b, 0x25, 0x62, 0x15, 0x0a, 0x06,
	0x0f, 0xb4, 0x3a, 0x2c, 0x52, 0x56, 0xd6, 0x2f, 0x6c, 0xe6, 0x9a, 0x79, 0x23, 0x04, 0x92, 0x87,
	0x39, 0x06, 0x72, 0xef, 0x21, 0x31, 0x07, 0x0e, 0x7e, 0x92, 0x81, 0xc5, 0x80, 0x2d, 0xd1, 0x1a,
	0x90, 0xa5, 0xcc, 0xc3, 0x50, 0xe6, 0xea, 0x5b, 0x35, 0xd9, 0xff, 0x5a, 0x42, 0x7e, 0x8d, 0x9b,
	0x1f, 0x10, 0x77, 0x30, 0x6a, 0x8a, 0x93, 0xe8, 0x0b, 0x28, 0xf4, 0x4d, 0xd2, 0xb1, 0x48, 0xb7,
	0x25, 0xb0, 0x32, 0x0c, 0x6b, 0x77, 0x0a, 0xd6, 0x27, 0xfc, 0x50, 0x10, 0x32, 0xdf, 0x0f, 0xfa,
	0xd4, 0x77, 0x61, 0x2e, 0x10, 0x45, 0xf3, 0x70, 0xe1, 0x81, 0xe9, 0xb5, 0x71, 0xfc, 0x13, 0x15,
	0x61, 0xf6, 0xc8, 0xe8, 0x0d, 0xcd, 0x72, 0x86, 0xf9, 0xb8, 0xf1, 0x5e, 0xe6, 0xa6, 0xa2, 0xde,
	0x02, 0x14, 0xc7, 0x7f, 0x15, 0x04, 0x8c, 0x01, 0xfc, 0xaa, 0xc7, 0x79, 0xac, 0xdd, 0xe2, 0x2c,
	0x37, 0xf0, 0x3d, 0x31, 0x40, 0x96, 0x23, 0x9b, 0x5a, 0x84, 0x59, 0xd6, 0x08, 0x2f, 0x97, 0x19,
	0xe8, 0x0d, 0xc8, 0x87, 0xda, 0x24, 0x18, 0x2f, 0x05, 0xaf, 0x8c, 0x0b, 0x70, 0x89, 0x01, 0x7e,
	0x36, 0x72, 0x5c, 0xd3, 0x76, 0xf0, 0x47, 0x50, 0x0c, 0xda, 0x92, 0xa2, 0x0e, 0x17, 0x1d, 0xee,
	0x12, 0x83, 0x43, 0x81, 0x66, 0xef, 0xb5, 0xdb, 0x74, 0x48, 0xdc, 0xc6, 0x6b, 0xcf, 0x5e, 0xae,
	0xcd, 0x34, 0xbd, 0x44, 0xbc, 0x2d, 0x56, 0x40, 0x60, 0x35, 0x46, 0x6c, 0x55, 0x52, 0x6e, 0xf6,
	0x0e, 0xac, 0x24, 0x24, 0x4b, 0xfe, 0x72, 0x98, 0x3f, 0xe7, 0xb3, 0x78, 0x8b, 0xb7, 0xd7, 0xb1,
	0x2d, 0xe2, 0xe0, 0x0f, 0x05, 0x29, 0x37, 0xe5, 0xf9, 0xeb, 0x90, 0x35, 0x98, 0x67, 0x6a, 0xf9,
	0x22, 0x0f, 0x6f, 0x79, 0x6f, 0x85, 0x99, 0x93, 0x8b, 0x7f, 0xdb, 0x7b, 0x41, 0xc1, 0x5c, 0xc9,
	0x5d, 0x0a, 0x71, 0xe7, 0x24, 0x43, 0x59, 0xbc, 0xe2, 0xbb, 0xc6, 0xa3, 0xbb, 0x16, 0x71, 0xd9,
	0xf3, 0x33, 0x48, 0xdb, 0x74, 0xf0, 0x0b, 0x05, 0xb4, 0xe4, 0x90, 0x04, 0xed, 0xc3, 0xa2, 0x6d,
	0x3c, 0x6a, 0xd9, 0x16, 0x71, 0x5b, 0x86, 0x0c, 0x8b, 0xdb, 0xdd, 0x8a, 0xbe, 0x84, 0x54, 0x9c,
	0x5a, 0x2c, 0xc2, 0x1f, 0xc6, 0x82, 0x1d, 0xf5, 0xab, 0xfb, 0x50, 0x4a, 0x4e, 0x7e, 0xa5, 0x2d,
	0xdf, 0x81, 0xa5, 0xc4, 0x8a, 0x52, 0x3a, 0xfb, 0x2d, 0x54, 0x12, 0xd3, 0x65, 0x1f, 0xbe, 0x02,
	0x14, 0xef, 0x03, 0xc7, 0x68, 0x5c, 0x1f, 0x0f, 0xf4, 0xef, 0x97, 0x6b, 0x4b, 0xfc, 0xdb, 0xec,
	0x74, 0x1e, 0xd4, 0x2c, 0xaa, 0xdb, 0x86, 0x7b, 0x58, 0xbb, 0x43, 0xdc, 0x3f, 0x9f, 0xee, 0x80,
	0xf8, 0x68, 0xdf, 0x21, 0xee, 0xef, 0xff, 0x3d, 0xd9, 0x52, 0x9a, 0xf3, 0xd1, 0x6b, 0xcb, 0x25,
	0x0e, 0xdf, 0x3b, 0xa5, 0xda, 0xa7, 0x8a, 0xd8, 0xe2, 0x94, 0xa1, 0x7d, 0x0e, 0x10, 0x9b, 0xd5,
	0x8d, 0xd8, 0xac, 0x92, 0x07, 0x15, 0x9d, 0x50, 0x00, 0x49, 0x7d, 0x1f, 0x5e, 0x3f, 0xcf, 0x4c,
	0xf6, 0xc5, 0xaa, 0x9f, 0x61, 0x20, 0xe3, 0x87, 0x68, 0xf0, 0xf7, 0x22, 0x70, 0x3c, 0x13, 0xf7,
	0xc4, 0x23, 0x48, 0x9e, 0xd3, 0xc7, 0x90, 0x3b, 0xff, 0x78, 0x7c, 0x88, 0xfa, 0x1f, 0x73, 0x30,
	0xcb, 0xe8, 0x50, 0x0f, 0x72, 0x52, 0x07, 0xd1, 0x72, 0xb4, 0x9b, 0x32, 0xa4, 0x6e, 0xa4, 0x86,
	0xbc, 0x22, 0xf1, 0xc6, 0x0f, 0x63, 0x9a, 0xef, 0xff, 0xfa, 0xf7, 0xb7, 0x4c, 0x09, 0x15, 0x75,
	0x5f, 0xc4, 0xa5, 0x84, 0xa2, 0x63, 0xc8, 0x87, 0x74, 0x12, 0x55, 0x62, 0xb0, 0xc1, 0xb0, 0x5a,
	0x9d, 0x18, 0x96, 0xcc, 0x57, 0x7c, 0xe6, 0x15, 0xb4, 0x1c, 0x64, 0x0e, 0x69, 0x2f, 0xba, 0x0f,
	0x59, 0xae, 0x2f, 0xa8, 0x94, 0xac, 0x76, 0xaa, 0x36, 0x59, 0x05, 0xb1, 0xe6, 0x33, 0x2d, 0xa2,
	0x85, 0x00, 0x93, 0x50, 0xd7, 0x0e, 0xcc, 0x72, 0x05, 0x5a, 0x4a, 0x04, 0x52, 0x2b, 0x89, 0x6e,
	0x09, 0x5f, 0xf5, 0xe1, 0x55, 0x54, 0x8e, 0xc2, 0xeb, 0x8f, 0xd9, 0x3d, 0x8e, 0x51, 0x07, 0x2e,
	0x8a, 0x2f, 0x3d, 0xba, 0x1c, 0x05, 0x14, 0x01, 0x75, 0x2d, 0x25, 0x20, 0xb9, 0xd6, 0x7c, 0xae,
	0x22, 0x42, 0x01, 0x2e, 0xa1, 0x0d, 0xe8, 0x3b, 0x05, 0x0a, 0x11, 0xf5, 0xd1, 0x52, 0x40, 0x45,
	0x5c, 0xbd, 0x32, 0x39, 0x2e, 0xb9, 0xaf, 0xfa, 0xdc, 0xab, 0x48, 0x8d, 0x73, 0xcb, 0x9b, 0xde,
	0x87, 0x2c, 0x97, 0x85, 0xf8, 0xc4, 0xb8, 0x3f, 0x3e, 0xb1, 0xb0, 0x76, 0xa5, 0x4f, 0x8c, 0xeb,
	0x08, 0x5b, 0xc9, 0x90, 0x48, 0x55, 0x92, 0x01, 0xbd, 0x2b, 0x56, 0x27, 0x86, 0xcf, 0xb0, 0x92,
	0x2c, 0x5d, 0x5e, 0xf0, 0x27, 0x05, 0x16, 0x62, 0xc2, 0x80, 0x36, 0xa6, 0x4a, 0x90, 0x7a, 0xed,
	0xcc, 0x2a, 0x85, 0xb7, 0xfd, 0x5a, 0xd6, 0x91, 0x16, 0xa8, 0x25, 0x41, 0x03, 0xd1, 0xaf, 0x0a,
	0xcc, 0xc7, 0xe4, 0x65, 0x7d, 0x1a, 0x99, 0xba, 0x39, 0x2d, 0x43, 0x56, 0x53, 0xf7, 0xab, 0xb9,
	0x8a, 0xaa, 0x13, 0xab, 0x91, 0x5d, 0xfa, 0x51, 0x81, 0x42, 0xa4, 0x45, 0xda, 0xe4, 0x2f, 0x7f,
	0x7c, 0x15, 0x53, 0x9a, 0xa3, 0xfb, 0xe5, 0xbc, 0x89, 0x70, 0xb0, 0x9c, 0x70, 0x63, 0x64, 0x2d,
	0x3f, 0x2b, 0x90, 0x0f, 0x77, 0xa7, 0x32, 0x91, 0x2a, 0xbe, 0x31, 0xc9, 0x7d, 0xb9, 0xe9, 0x17,
	0xb2, 0x83, 0xb6, 0x53, 0x0b, 0xf1, 0xea, 0xd0, 0x1f, 0x0b, 0xe9, 0x38, 0x6e, 0xdc, 0x7e, 0x76,
	0xa2, 0x29, 0xcf, 0x4f, 0x34, 0xe5, 0x9f, 0x13, 0x4d, 0xf9, 0xe5, 0x54, 0x9b, 0x79, 0x7e, 0xaa,
	0xcd, 0xbc, 0x38, 0xd5, 0x66, 0xbe, 0xbc, 0xd6, 0xb5, 0xdc, 0xc3, 0xe1, 0x41, 0xad, 0x4d, 0x6d,
	0xdd, 0xa6, 0xc4, 0x1c, 0x58, 0xc3, 0xf1, 0x8f, 0xce, 0xb0, 0x67, 0xee, 0x10, 0x7a, 0xd0, 0x33,
	0xf5, 0xa3, 0xba, 0xee, 0x8e, 0xfa, 0xa6, 0x73, 0x90, 0x65, 0xff, 0x2e, 0xbd, 0xf5, 0x7f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xf7, 0x9b, 0x4e, 0xb4, 0xea, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Authority(ctx context.Context, in *QueryAuthority, opts ...grpc.CallOption) (*QueryAuthorityResponse, error)
	AllowedDenoms(ctx context.Context, in *QueryAllowedDenoms, opts ...grpc.CallOption) (*QueryAllowedDenomsResponse, error)
	Owners(ctx context.Context, in *QueryOwners, opts ...grpc.CallOption) (*QueryOwnersResponse, error)
	Owner(ctx context.Context, in *QueryOwner, opts ...grpc.CallOption) (*QueryOwnerResponse, error)
	Systems(ctx context.Context, in *QuerySystems, opts ...grpc.CallOption) (*QuerySystemsResponse, error)
	SystemsByDenom(ctx context.Context, in *QuerySystemsByDenom, opts ...grpc.CallOption) (*QuerySystemsByDenomResponse, error)
	Admins(ctx context.Context, in *QueryAdmins, opts ...grpc.CallOption) (*QueryAdminsResponse, error)
	AdminsByDenom(ctx context.Context, in *QueryAdminsByDenom, opts ...grpc.CallOption) (*QueryAdminsByDenomResponse, error)
	MaxMintAllowances(ctx context.Context, in *QueryMaxMintAllowances, opts ...grpc.CallOption) (*QueryMaxMintAllowancesResponse, error)
	MaxMintAllowance(ctx context.Context, in *QueryMaxMintAllowance, opts ...grpc.CallOption) (*QueryMaxMintAllowanceResponse, error)
	MintAllowances(ctx context.Context, in *QueryMintAllowances, opts ...grpc.CallOption) (*QueryMintAllowancesResponse, error)
	MintAllowance(ctx context.Context, in *QueryMintAllowance, opts ...grpc.CallOption) (*QueryMintAllowanceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Authority(ctx context.Context, in *QueryAuthority, opts ...grpc.CallOption) (*QueryAuthorityResponse, error) {
	out := new(QueryAuthorityResponse)
	err := c.cc.Invoke(ctx, "/florin.v1.Query/Authority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllowedDenoms(ctx context.Context, in *QueryAllowedDenoms, opts ...grpc.CallOption) (*QueryAllowedDenomsResponse, error) {
	out := new(QueryAllowedDenomsResponse)
	err := c.cc.Invoke(ctx, "/florin.v1.Query/AllowedDenoms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Owners(ctx context.Context, in *QueryOwners, opts ...grpc.CallOption) (*QueryOwnersResponse, error) {
	out := new(QueryOwnersResponse)
	err := c.cc.Invoke(ctx, "/florin.v1.Query/Owners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Owner(ctx context.Context, in *QueryOwner, opts ...grpc.CallOption) (*QueryOwnerResponse, error) {
	out := new(QueryOwnerResponse)
	err := c.cc.Invoke(ctx, "/florin.v1.Query/Owner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Systems(ctx context.Context, in *QuerySystems, opts ...grpc.CallOption) (*QuerySystemsResponse, error) {
	out := new(QuerySystemsResponse)
	err := c.cc.Invoke(ctx, "/florin.v1.Query/Systems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SystemsByDenom(ctx context.Context, in *QuerySystemsByDenom, opts ...grpc.CallOption) (*QuerySystemsByDenomResponse, error) {
	out := new(QuerySystemsByDenomResponse)
	err := c.cc.Invoke(ctx, "/florin.v1.Query/SystemsByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Admins(ctx context.Context, in *QueryAdmins, opts ...grpc.CallOption) (*QueryAdminsResponse, error) {
	out := new(QueryAdminsResponse)
	err := c.cc.Invoke(ctx, "/florin.v1.Query/Admins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AdminsByDenom(ctx context.Context, in *QueryAdminsByDenom, opts ...grpc.CallOption) (*QueryAdminsByDenomResponse, error) {
	out := new(QueryAdminsByDenomResponse)
	err := c.cc.Invoke(ctx, "/florin.v1.Query/AdminsByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MaxMintAllowances(ctx context.Context, in *QueryMaxMintAllowances, opts ...grpc.CallOption) (*QueryMaxMintAllowancesResponse, error) {
	out := new(QueryMaxMintAllowancesResponse)
	err := c.cc.Invoke(ctx, "/florin.v1.Query/MaxMintAllowances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MaxMintAllowance(ctx context.Context, in *QueryMaxMintAllowance, opts ...grpc.CallOption) (*QueryMaxMintAllowanceResponse, error) {
	out := new(QueryMaxMintAllowanceResponse)
	err := c.cc.Invoke(ctx, "/florin.v1.Query/MaxMintAllowance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MintAllowances(ctx context.Context, in *QueryMintAllowances, opts ...grpc.CallOption) (*QueryMintAllowancesResponse, error) {
	out := new(QueryMintAllowancesResponse)
	err := c.cc.Invoke(ctx, "/florin.v1.Query/MintAllowances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MintAllowance(ctx context.Context, in *QueryMintAllowance, opts ...grpc.CallOption) (*QueryMintAllowanceResponse, error) {
	out := new(QueryMintAllowanceResponse)
	err := c.cc.Invoke(ctx, "/florin.v1.Query/MintAllowance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Authority(context.Context, *QueryAuthority) (*QueryAuthorityResponse, error)
	AllowedDenoms(context.Context, *QueryAllowedDenoms) (*QueryAllowedDenomsResponse, error)
	Owners(context.Context, *QueryOwners) (*QueryOwnersResponse, error)
	Owner(context.Context, *QueryOwner) (*QueryOwnerResponse, error)
	Systems(context.Context, *QuerySystems) (*QuerySystemsResponse, error)
	SystemsByDenom(context.Context, *QuerySystemsByDenom) (*QuerySystemsByDenomResponse, error)
	Admins(context.Context, *QueryAdmins) (*QueryAdminsResponse, error)
	AdminsByDenom(context.Context, *QueryAdminsByDenom) (*QueryAdminsByDenomResponse, error)
	MaxMintAllowances(context.Context, *QueryMaxMintAllowances) (*QueryMaxMintAllowancesResponse, error)
	MaxMintAllowance(context.Context, *QueryMaxMintAllowance) (*QueryMaxMintAllowanceResponse, error)
	MintAllowances(context.Context, *QueryMintAllowances) (*QueryMintAllowancesResponse, error)
	MintAllowance(context.Context, *QueryMintAllowance) (*QueryMintAllowanceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Authority(ctx context.Context, req *QueryAuthority) (*QueryAuthorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authority not implemented")
}
func (*UnimplementedQueryServer) AllowedDenoms(ctx context.Context, req *QueryAllowedDenoms) (*QueryAllowedDenomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowedDenoms not implemented")
}
func (*UnimplementedQueryServer) Owners(ctx context.Context, req *QueryOwners) (*QueryOwnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Owners not implemented")
}
func (*UnimplementedQueryServer) Owner(ctx context.Context, req *QueryOwner) (*QueryOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Owner not implemented")
}
func (*UnimplementedQueryServer) Systems(ctx context.Context, req *QuerySystems) (*QuerySystemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Systems not implemented")
}
func (*UnimplementedQueryServer) SystemsByDenom(ctx context.Context, req *QuerySystemsByDenom) (*QuerySystemsByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemsByDenom not implemented")
}
func (*UnimplementedQueryServer) Admins(ctx context.Context, req *QueryAdmins) (*QueryAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Admins not implemented")
}
func (*UnimplementedQueryServer) AdminsByDenom(ctx context.Context, req *QueryAdminsByDenom) (*QueryAdminsByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminsByDenom not implemented")
}
func (*UnimplementedQueryServer) MaxMintAllowances(ctx context.Context, req *QueryMaxMintAllowances) (*QueryMaxMintAllowancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxMintAllowances not implemented")
}
func (*UnimplementedQueryServer) MaxMintAllowance(ctx context.Context, req *QueryMaxMintAllowance) (*QueryMaxMintAllowanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxMintAllowance not implemented")
}
func (*UnimplementedQueryServer) MintAllowances(ctx context.Context, req *QueryMintAllowances) (*QueryMintAllowancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintAllowances not implemented")
}
func (*UnimplementedQueryServer) MintAllowance(ctx context.Context, req *QueryMintAllowance) (*QueryMintAllowanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintAllowance not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Authority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuthority)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Authority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/florin.v1.Query/Authority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Authority(ctx, req.(*QueryAuthority))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllowedDenoms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllowedDenoms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllowedDenoms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/florin.v1.Query/AllowedDenoms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllowedDenoms(ctx, req.(*QueryAllowedDenoms))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Owners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOwners)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Owners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/florin.v1.Query/Owners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Owners(ctx, req.(*QueryOwners))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Owner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Owner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/florin.v1.Query/Owner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Owner(ctx, req.(*QueryOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Systems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySystems)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Systems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/florin.v1.Query/Systems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Systems(ctx, req.(*QuerySystems))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SystemsByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySystemsByDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SystemsByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/florin.v1.Query/SystemsByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SystemsByDenom(ctx, req.(*QuerySystemsByDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Admins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAdmins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Admins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/florin.v1.Query/Admins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Admins(ctx, req.(*QueryAdmins))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AdminsByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAdminsByDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AdminsByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/florin.v1.Query/AdminsByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AdminsByDenom(ctx, req.(*QueryAdminsByDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MaxMintAllowances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMaxMintAllowances)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MaxMintAllowances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/florin.v1.Query/MaxMintAllowances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MaxMintAllowances(ctx, req.(*QueryMaxMintAllowances))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MaxMintAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMaxMintAllowance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MaxMintAllowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/florin.v1.Query/MaxMintAllowance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MaxMintAllowance(ctx, req.(*QueryMaxMintAllowance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MintAllowances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMintAllowances)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MintAllowances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/florin.v1.Query/MintAllowances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MintAllowances(ctx, req.(*QueryMintAllowances))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MintAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMintAllowance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MintAllowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/florin.v1.Query/MintAllowance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MintAllowance(ctx, req.(*QueryMintAllowance))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "florin.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authority",
			Handler:    _Query_Authority_Handler,
		},
		{
			MethodName: "AllowedDenoms",
			Handler:    _Query_AllowedDenoms_Handler,
		},
		{
			MethodName: "Owners",
			Handler:    _Query_Owners_Handler,
		},
		{
			MethodName: "Owner",
			Handler:    _Query_Owner_Handler,
		},
		{
			MethodName: "Systems",
			Handler:    _Query_Systems_Handler,
		},
		{
			MethodName: "SystemsByDenom",
			Handler:    _Query_SystemsByDenom_Handler,
		},
		{
			MethodName: "Admins",
			Handler:    _Query_Admins_Handler,
		},
		{
			MethodName: "AdminsByDenom",
			Handler:    _Query_AdminsByDenom_Handler,
		},
		{
			MethodName: "MaxMintAllowances",
			Handler:    _Query_MaxMintAllowances_Handler,
		},
		{
			MethodName: "MaxMintAllowance",
			Handler:    _Query_MaxMintAllowance_Handler,
		},
		{
			MethodName: "MintAllowances",
			Handler:    _Query_MintAllowances_Handler,
		},
		{
			MethodName: "MintAllowance",
			Handler:    _Query_MintAllowance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "florin/v1/query.proto",
}

func (m *QueryAuthority) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuthority) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuthority) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAuthorityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuthorityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuthorityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllowedDenoms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowedDenoms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowedDenoms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllowedDenomsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowedDenomsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowedDenomsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedDenoms) > 0 {
		for iNdEx := len(m.AllowedDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedDenoms[iNdEx])
			copy(dAtA[i:], m.AllowedDenoms[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.AllowedDenoms[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwners) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwners) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwners) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOwnersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingOwners) > 0 {
		for k := range m.PendingOwners {
			v := m.PendingOwners[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintQuery(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Owners) > 0 {
		for k := range m.Owners {
			v := m.Owners[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintQuery(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingOwner) > 0 {
		i -= len(m.PendingOwner)
		copy(dAtA[i:], m.PendingOwner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PendingOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySystems) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySystems) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySystems) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySystemsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySystemsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySystemsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Systems) > 0 {
		for iNdEx := len(m.Systems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Systems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySystemsByDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySystemsByDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySystemsByDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySystemsByDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySystemsByDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySystemsByDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Systems) > 0 {
		for iNdEx := len(m.Systems) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Systems[iNdEx])
			copy(dAtA[i:], m.Systems[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Systems[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAdmins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAdmins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAdmins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAdminsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAdminsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAdminsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Admins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAdminsByDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAdminsByDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAdminsByDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAdminsByDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAdminsByDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAdminsByDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Admins[iNdEx])
			copy(dAtA[i:], m.Admins[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Admins[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMaxMintAllowances) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMaxMintAllowances) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMaxMintAllowances) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMaxMintAllowancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMaxMintAllowancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMaxMintAllowancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxMintAllowances) > 0 {
		for k := range m.MaxMintAllowances {
			v := m.MaxMintAllowances[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintQuery(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMaxMintAllowance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMaxMintAllowance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMaxMintAllowance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMaxMintAllowanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMaxMintAllowanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMaxMintAllowanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxMintAllowance.Size()
		i -= size
		if _, err := m.MaxMintAllowance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMintAllowances) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMintAllowances) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMintAllowances) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMintAllowancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMintAllowancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMintAllowancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Allowances) > 0 {
		for k := range m.Allowances {
			v := m.Allowances[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintQuery(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMintAllowance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMintAllowance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMintAllowance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMintAllowanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMintAllowanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMintAllowanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Allowance.Size()
		i -= size
		if _, err := m.Allowance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAuthority) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAuthorityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllowedDenoms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllowedDenomsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllowedDenoms) > 0 {
		for _, s := range m.AllowedDenoms {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOwners) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOwnersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Owners) > 0 {
		for k, v := range m.Owners {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + len(v) + sovQuery(uint64(len(v)))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	if len(m.PendingOwners) > 0 {
		for k, v := range m.PendingOwners {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + len(v) + sovQuery(uint64(len(v)))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PendingOwner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySystems) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySystemsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Systems) > 0 {
		for _, e := range m.Systems {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySystemsByDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySystemsByDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Systems) > 0 {
		for _, s := range m.Systems {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAdmins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAdminsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Admins) > 0 {
		for _, e := range m.Admins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAdminsByDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAdminsByDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Admins) > 0 {
		for _, s := range m.Admins {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryMaxMintAllowances) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMaxMintAllowancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MaxMintAllowances) > 0 {
		for k, v := range m.MaxMintAllowances {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + len(v) + sovQuery(uint64(len(v)))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryMaxMintAllowance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMaxMintAllowanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MaxMintAllowance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMintAllowances) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMintAllowancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Allowances) > 0 {
		for k, v := range m.Allowances {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + len(v) + sovQuery(uint64(len(v)))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryMintAllowance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMintAllowanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Allowance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAuthority) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuthority: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuthority: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuthorityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuthorityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuthorityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowedDenoms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowedDenoms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowedDenoms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowedDenomsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowedDenomsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowedDenomsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedDenoms = append(m.AllowedDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwners) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwners: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwners: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owners == nil {
				m.Owners = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Owners[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingOwners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PendingOwners == nil {
				m.PendingOwners = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PendingOwners[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySystems) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySystems: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySystems: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySystemsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySystemsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySystemsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Systems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Systems = append(m.Systems, Account{})
			if err := m.Systems[len(m.Systems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySystemsByDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySystemsByDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySystemsByDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySystemsByDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySystemsByDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySystemsByDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Systems", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Systems = append(m.Systems, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAdmins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAdmins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAdmins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAdminsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAdminsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAdminsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, Account{})
			if err := m.Admins[len(m.Admins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAdminsByDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAdminsByDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAdminsByDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAdminsByDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAdminsByDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAdminsByDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMaxMintAllowances) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMaxMintAllowances: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMaxMintAllowances: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMaxMintAllowancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMaxMintAllowancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMaxMintAllowancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMintAllowances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxMintAllowances == nil {
				m.MaxMintAllowances = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MaxMintAllowances[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMaxMintAllowance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMaxMintAllowance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMaxMintAllowance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMaxMintAllowanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMaxMintAllowanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMaxMintAllowanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMintAllowance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxMintAllowance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMintAllowances) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMintAllowances: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMintAllowances: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMintAllowancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMintAllowancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMintAllowancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allowances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Allowances == nil {
				m.Allowances = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Allowances[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMintAllowance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMintAllowance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMintAllowance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMintAllowanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMintAllowanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMintAllowanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allowance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Allowance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
